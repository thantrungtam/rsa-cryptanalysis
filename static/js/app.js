// H√†m utility
function formatNumber(num) {
    // Tr·∫£ v·ªÅ s·ªë nguy√™n ƒë·∫ßy ƒë·ªß kh√¥ng c√≥ d·∫•u ph·∫©y
    if (!num || num === 'N/A') return num;

    let numStr = '';
    if (typeof num === 'string') {
        numStr = num.replace(/,/g, ''); // Lo·∫°i b·ªè d·∫•u ph·∫©y n·∫øu c√≥
    } else {
        numStr = String(num).replace(/,/g, ''); // Chuy·ªÉn th√†nh string v√† lo·∫°i b·ªè d·∫•u ph·∫©y
    }

    return numStr;
}

function formatNumberForDisplay(num, maxLength = 40) {
    // Format s·ªë cho hi·ªÉn th·ªã trong step, r√∫t g·ªçn n·∫øu qu√° d√†i, lo·∫°i b·ªè d·∫•u ph·∫©y
    let numStr = '';
    if (typeof num === 'string') {
        numStr = num.replace(/,/g, ''); // Lo·∫°i b·ªè d·∫•u ph·∫©y
    } else {
        numStr = String(num).replace(/,/g, ''); // Lo·∫°i b·ªè d·∫•u ph·∫©y
    }

    if (numStr.length > maxLength) {
        return numStr.substring(0, maxLength) + '...' + numStr.substring(numStr.length - 10);
    }
    return numStr;
}

function showLoading(elementId) {
    const element = document.getElementById(elementId);
    if (element) {
        element.style.display = 'block';
    }
}

function hideLoading(elementId) {
    const element = document.getElementById(elementId);
    if (element) {
        element.style.display = 'none';
    }
}

function showResult(containerId, content, type = 'info') {
    const container = document.getElementById(containerId);
    if (!container) return;

    container.innerHTML = content;
    container.className = `result-section result-${type}`;
    container.style.display = 'block';
}

function clearResult(containerId) {
    const container = document.getElementById(containerId);
    if (container) {
        container.style.display = 'none';
        container.innerHTML = '';
    }
}

// Tab management
function initializeTabs() {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const targetTab = button.getAttribute('data-tab');

            // Remove active class from all buttons and contents
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));

            // Add active class to clicked button and corresponding content
            button.classList.add('active');
            document.getElementById(targetTab).classList.add('active');
        });
    });
}

// RSA Key Generation
async function generateRSAKey() {
    const e = parseInt(document.getElementById('exponent').value) || 3;
    const bits = parseInt(document.getElementById('key-bits').value) || 1024;

    showLoading('key-loading');
    clearResult('key-result');

    try {
        const response = await fetch('/api/generate_key', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ e: e, bits: bits })
        });

        const result = await response.json();
        hideLoading('key-loading');

        if (result.success) {
            const keyHTML = `
                <h3>üîë C·∫∑p kh√≥a RSA ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!</h3>
                
                <div class="steps-container">
                    <h4>üìã C√°c b∆∞·ªõc sinh kh√≥a RSA:</h4>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 1:</span>
                        <span class="step-math">Ch·ªçn hai s·ªë nguy√™n t·ªë l·ªõn p v√† q</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 2:</span>
                        <span class="step-math">T√≠nh modulus: n = p √ó q = ${formatNumberForDisplay(result.p)} √ó ${formatNumberForDisplay(result.q)} = ${formatNumberForDisplay(result.n)}</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 3:</span>
                        <span class="step-math">T√≠nh h√†m Euler: œÜ(n) = (p-1) √ó (q-1) = ${formatNumberForDisplay(result.p - 1)} √ó ${formatNumberForDisplay(result.q - 1)}</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 4:</span>
                        <span class="step-math">Ch·ªçn s·ªë m≈© c√¥ng khai e = ${result.e} (gcd(e, œÜ(n)) = 1)</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 5:</span>
                        <span class="step-math">T√≠nh s·ªë m≈© ri√™ng d sao cho e √ó d ‚â° 1 (mod œÜ(n))</span>
                    </div>
                </div>

                <div class="key-display">
                    <h4>üîê Th√¥ng tin kh√≥a chi ti·∫øt:</h4>
                    <div class="key-row">
                        <span class="key-label">S·ªë nguy√™n t·ªë p:</span>
                        <textarea class="key-textarea" readonly>${formatNumber(result.p)}</textarea>
                    </div>
                    <div class="key-row">
                        <span class="key-label">S·ªë nguy√™n t·ªë q:</span>
                        <textarea class="key-textarea" readonly>${formatNumber(result.q)}</textarea>
                    </div>
                    <div class="key-row">
                        <span class="key-label">Modulus (n = p√óq):</span>
                        <textarea class="key-textarea" readonly>${formatNumber(result.n)}</textarea>
                    </div>
                    <div class="key-row">
                        <span class="key-label">S·ªë m≈© c√¥ng khai (e):</span>
                        <span class="key-value short">${result.e}</span>
                    </div>
                    <div class="key-row">
                        <span class="key-label">S·ªë m≈© ri√™ng (d):</span>
                        <textarea class="key-textarea" readonly>${formatNumber(result.d)}</textarea>
                    </div>
                    <div class="key-row">
                        <span class="key-label">ƒê·ªô d√†i kh√≥a:</span>
                        <span class="key-value short">${result.bits} bits</span>
                    </div>
                </div>
                
                <div class="warning-box mt-2">
                    <strong>‚ö†Ô∏è C·∫£nh b√°o b·∫£o m·∫≠t:</strong> V·ªõi e = ${result.e}, kh√≥a n√†y d·ªÖ b·ªã t·∫•n c√¥ng n·∫øu b·∫£n r√µ nh·ªè (m^e < n)!
                </div>
            `;
            showResult('key-result', keyHTML, 'success');

            // L∆∞u kh√≥a v√†o form
            document.getElementById('encrypt-n').value = result.n;
            document.getElementById('encrypt-e').value = result.e;
            document.getElementById('decrypt-n').value = result.n;
            document.getElementById('decrypt-d').value = result.d;
            document.getElementById('attack-n').value = result.n;
            document.getElementById('attack-e').value = result.e;
        } else {
            showResult('key-result', `<h3>‚ùå L·ªói t·∫°o kh√≥a</h3><p>${result.error}</p>`, 'error');
        }
    } catch (error) {
        hideLoading('key-loading');
        showResult('key-result', `<h3>‚ùå L·ªói k·∫øt n·ªëi</h3><p>${error.message}</p>`, 'error');
    }
}

// RSA Encryption
async function encryptMessage() {
    const message = document.getElementById('encrypt-message').value;
    const n = document.getElementById('encrypt-n').value;
    const e = document.getElementById('encrypt-e').value;
    const paddingType = document.getElementById('encrypt-padding').value;
    const inputType = 'text'; // Ch·ªâ s·ª≠ d·ª•ng text

    if (!message || !n || !e) {
        showResult('encrypt-result', '<h3>‚ö†Ô∏è Thi·∫øu th√¥ng tin</h3><p>Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!</p>', 'warning');
        return;
    }

    showLoading('encrypt-loading');
    clearResult('encrypt-result');

    try {
        const response = await fetch('/api/encrypt', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                message: message,
                n: n,
                e: e,
                input_type: inputType,
                padding_type: paddingType
            })
        });

        const result = await response.json();
        hideLoading('encrypt-loading');

        if (result.success) {
            const encryptHTML = `
                <h3>üîí M√£ h√≥a RSA th√†nh c√¥ng!</h3>
                
                <div class="steps-container">
                    <h4>üìã C√°c b∆∞·ªõc m√£ h√≥a RSA:</h4>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 1:</span>
                        <span class="step-math">Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh s·ªë: "${result.original_display}" ‚Üí ${formatNumber(result.message_int)}</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 2:</span>
                        <span class="step-math">√Åp d·ª•ng c√¥ng th·ª©c m√£ h√≥a: c ‚â° m^e (mod n)</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 3:</span>
                        <span class="step-math">T√≠nh to√°n: c ‚â° ${formatNumberForDisplay(result.message_int)}^${e} (mod ${formatNumberForDisplay(n)})</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 4:</span>
                        <span class="step-math">K·∫øt qu·∫£: c = ${formatNumber(result.ciphertext)}</span>
                    </div>
                </div>

                <div class="key-display">
                    <h4>üìä Th√¥ng tin m√£ h√≥a:</h4>
                    <div class="key-row">
                        <span class="key-label">VƒÉn b·∫£n g·ªëc:</span>
                        <span class="key-value">"${result.original_display}"</span>
                    </div>
                    <div class="key-row">
                        <span class="key-label">Lo·∫°i padding:</span>
                        <span class="key-value">${result.padding_info}</span>
                    </div>
                    ${result.message_int !== 'N/A (s·ª≠ d·ª•ng padding)' ? `
                    <div class="key-row">
                        <span class="key-label">Gi√° tr·ªã s·ªë nguy√™n (m):</span>
                        <textarea class="key-textarea" readonly>${formatNumber(result.message_int)}</textarea>
                    </div>
                    ` : ''}
                    <div class="key-row">
                        <span class="key-label">S·ªë m≈© c√¥ng khai (e):</span>
                        <span class="key-value short">${e}</span>
                    </div>
                    <div class="key-row">
                        <span class="key-label">Modulus (n):</span>
                        <textarea class="key-textarea" readonly>${formatNumber(n)}</textarea>
                    </div>
                    <div class="key-row">
                        <span class="key-label">B·∫£n m√£ (c):</span>
                        <textarea class="key-textarea" readonly>${formatNumber(result.ciphertext)}</textarea>
                    </div>
                </div>
                
                <div class="step-item mt-2">
                    <span class="step-number">üîç Ph√¢n t√≠ch b·∫£o m·∫≠t:</span> 
                    <span class="step-math">${result.comparison.replace(/,/g, '')}</span>
                </div>
                
                ${result.is_vulnerable ?
                    '<div class="warning-box mt-2"><strong>‚ö†Ô∏è NGUY HI·ªÇM:</strong> m^e < n, b·∫£n m√£ c√≥ th·ªÉ b·ªã t·∫•n c√¥ng khai cƒÉn! K·∫ª t·∫•n c√¥ng c√≥ th·ªÉ t√≠nh m = ‚àõc ƒë·ªÉ kh√¥i ph·ª•c b·∫£n r√µ.</div>' :
                    '<div class="attack-example mt-2"><strong>‚úÖ AN TO√ÄN:</strong> m^e ‚â• n, kh√¥ng th·ªÉ t·∫•n c√¥ng khai cƒÉn tr·ª±c ti·∫øp v√¨ ph√©p modulo ƒë√£ c√≥ t√°c d·ª•ng.</div>'
                }
            `;
            showResult('encrypt-result', encryptHTML, 'success');

            // L∆∞u b·∫£n m√£ ƒë·ªÉ gi·∫£i m√£ ho·∫∑c t·∫•n c√¥ng
            document.getElementById('decrypt-ciphertext').value = result.ciphertext;
            document.getElementById('attack-ciphertext').value = result.ciphertext;
        } else {
            showResult('encrypt-result', `<h3>‚ùå L·ªói m√£ h√≥a</h3><p>${result.error}</p>`, 'error');
        }
    } catch (error) {
        hideLoading('encrypt-loading');
        showResult('encrypt-result', `<h3>‚ùå L·ªói k·∫øt n·ªëi</h3><p>${error.message}</p>`, 'error');
    }
}

// RSA Decryption
async function decryptMessage() {
    const ciphertext = document.getElementById('decrypt-ciphertext').value;
    const n = document.getElementById('decrypt-n').value;
    const d = document.getElementById('decrypt-d').value;
    const e = document.getElementById('encrypt-e').value; // L·∫•y e t·ª´ encrypt tab
    const paddingType = document.getElementById('decrypt-padding').value;

    if (!ciphertext || !n || !d) {
        showResult('decrypt-result', '<h3>‚ö†Ô∏è Thi·∫øu th√¥ng tin</h3><p>Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!</p>', 'warning');
        return;
    }

    showLoading('decrypt-loading');
    clearResult('decrypt-result');

    try {
        const response = await fetch('/api/decrypt', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                ciphertext: ciphertext,
                n: n,
                d: d,
                e: e,
                padding_type: paddingType
            })
        });

        const result = await response.json();
        hideLoading('decrypt-loading');

        if (result.success) {
            const decryptHTML = `
                <h3>üîì Gi·∫£i m√£ RSA th√†nh c√¥ng!</h3>
                
                <div class="steps-container">
                    <h4>üìã C√°c b∆∞·ªõc gi·∫£i m√£ RSA:</h4>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 1:</span>
                        <span class="step-math">√Åp d·ª•ng c√¥ng th·ª©c gi·∫£i m√£: m ‚â° c^d (mod n)</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 2:</span>
                        <span class="step-math">T√≠nh to√°n: m ‚â° ${formatNumber(ciphertext)}^${formatNumber(d)} (mod ${formatNumber(n)})</span>
                    </div>
                    ${result.message_int !== 'N/A' ? `
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 3:</span>
                        <span class="step-math">K·∫øt qu·∫£ s·ªë nguy√™n: m = ${formatNumber(result.message_int)}</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 4:</span>
                        <span class="step-math">Chuy·ªÉn ƒë·ªïi v·ªÅ vƒÉn b·∫£n: ${formatNumber(result.message_int)} ‚Üí "${result.message}"</span>
                    </div>
                    ` : `
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 3:</span>
                        <span class="step-math">Gi·∫£i m√£ b·∫±ng padding scheme: ${result.padding_type}</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 4:</span>
                        <span class="step-math">K·∫øt qu·∫£: "${result.message}"</span>
                    </div>
                    `}
                </div>

                <div class="key-display">
                    <h4>üìä Th√¥ng tin gi·∫£i m√£:</h4>
                    <div class="key-row">
                        <span class="key-label">B·∫£n m√£ (c):</span>
                        <textarea class="key-textarea" readonly>${formatNumber(ciphertext)}</textarea>
                    </div>
                    <div class="key-row">
                        <span class="key-label">Lo·∫°i padding:</span>
                        <span class="key-value">${result.padding_type}</span>
                    </div>
                    <div class="key-row">
                        <span class="key-label">S·ªë m≈© ri√™ng (d):</span>
                        <textarea class="key-textarea" readonly>${formatNumber(d)}</textarea>
                    </div>
                    <div class="key-row">
                        <span class="key-label">Modulus (n):</span>
                        <textarea class="key-textarea" readonly>${formatNumber(n)}</textarea>
                    </div>
                    ${result.message_int !== 'N/A' ? `
                    <div class="key-row">
                        <span class="key-label">B·∫£n r√µ (s·ªë nguy√™n):</span>
                        <textarea class="key-textarea" readonly>${formatNumber(result.message_int)}</textarea>
                    </div>
                    ` : ''}
                    <div class="key-row">
                        <span class="key-label">B·∫£n r√µ (vƒÉn b·∫£n):</span>
                        <span class="key-value">"${result.message}"</span>
                    </div>
                </div>
                
                <div class="attack-example mt-2">
                    <strong>‚úÖ Th√†nh c√¥ng:</strong> Gi·∫£i m√£ RSA ho√†n t·∫•t v·ªõi kh√≥a ri√™ng h·ª£p l·ªá!
                </div>
            `;
            showResult('decrypt-result', decryptHTML, 'success');
        } else {
            showResult('decrypt-result', `<h3>‚ùå L·ªói gi·∫£i m√£</h3><p>${result.error}</p>`, 'error');
        }
    } catch (error) {
        hideLoading('decrypt-loading');
        showResult('decrypt-result', `<h3>‚ùå L·ªói k·∫øt n·ªëi</h3><p>${error.message}</p>`, 'error');
    }
}

// Single Attack (Cube Root Attack)
async function performSingleAttack() {
    const ciphertext = document.getElementById('attack-ciphertext').value;
    const n = document.getElementById('attack-n').value;
    const e = document.getElementById('attack-e').value;

    if (!ciphertext || !n || !e) {
        showResult('attack-result', '<h3>‚ö†Ô∏è Thi·∫øu th√¥ng tin</h3><p>Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!</p>', 'warning');
        return;
    }

    showLoading('attack-loading');
    clearResult('attack-result');

    try {
        const response = await fetch('/api/attack_single', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ ciphertext: ciphertext, n: n, e: e })
        });

        const result = await response.json();
        hideLoading('attack-loading');

        if (result.success) {
            const attackHTML = `
                <h3>üéØ T·∫•n c√¥ng khai cƒÉn th√†nh c√¥ng!</h3>
                
                <div class="steps-container">
                    <h4>üïµÔ∏è C√°c b∆∞·ªõc t·∫•n c√¥ng khai cƒÉn:</h4>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 1:</span>
                        <span class="step-math">Ki·ªÉm tra ƒëi·ªÅu ki·ªán: m^e < n (b·∫£n r√µ nh·ªè)</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 2:</span>
                        <span class="step-math">V√¨ m^e < n n√™n c = m^e (kh√¥ng c√≥ modulo th·ª±c s·ª±)</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 3:</span>
                        <span class="step-math">T√≠nh cƒÉn b·∫≠c ${result.e || 'e'}: m = ‚àõc = ‚àõ${formatNumber(result.ciphertext || 'c')} = ${formatNumber(result.recovered_m)}</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 4:</span>
                        <span class="step-math">K·∫øt qu·∫£: m = ${formatNumber(result.recovered_m)}</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 5:</span>
                        <span class="step-math">Chuy·ªÉn ƒë·ªïi v·ªÅ vƒÉn b·∫£n: ${formatNumber(result.recovered_m)} ‚Üí "${result.message}"</span>
                    </div>
                </div>

                <div class="key-display">
                    <h4>üìä K·∫øt qu·∫£ t·∫•n c√¥ng:</h4>
                    <div class="key-row">
                        <span class="key-label">B·∫£n m√£ b·ªã t·∫•n c√¥ng (c):</span>
                        <textarea class="key-textarea" readonly>${formatNumber(result.ciphertext || ciphertext)}</textarea>
                    </div>
                    <div class="key-row">
                        <span class="key-label">Modulus (n):</span>
                        <textarea class="key-textarea" readonly>${formatNumber(n)}</textarea>
                    </div>
                    <div class="key-row">
                        <span class="key-label">S·ªë m≈© c√¥ng khai (e):</span>
                        <span class="key-value short">${result.e || e}</span>
                    </div>
                    <div class="key-row">
                        <span class="key-label">B·∫£n r√µ kh√¥i ph·ª•c (m):</span>
                        <textarea class="key-textarea" readonly>${formatNumber(result.recovered_m)}</textarea>
                    </div>
                    <div class="key-row">
                        <span class="key-label">VƒÉn b·∫£n kh√¥i ph·ª•c:</span>
                        <span class="key-value">"${result.message}"</span>
                    </div>
                </div>
                
                <div class="warning-box mt-2">
                    <strong>üö® K·∫øt lu·∫≠n:</strong> RSA v·ªõi s·ªë m≈© nh·ªè (e=${result.e || e}) v√† b·∫£n r√µ nh·ªè c√≥ th·ªÉ b·ªã ph√° d·ªÖ d√†ng b·∫±ng t·∫•n c√¥ng khai cƒÉn!
                </div>
                
                <div class="attack-example mt-2">
                    <strong>üí° C√°ch ph√≤ng ch·ªëng:</strong> S·ª≠ d·ª•ng padding (OAEP), s·ªë m≈© l·ªõn h∆°n (e=65537), ho·∫∑c ƒë·∫£m b·∫£o m^e ‚â• n.
                </div>
            `;
            showResult('attack-result', attackHTML, 'success');
        } else {
            const errorHTML = `
                <h3>‚ùå T·∫•n c√¥ng th·∫•t b·∫°i</h3>
                <p>${result.error}</p>
                ${result.steps ? `
                    <div class="steps-container">
                        <h4>C√°c b∆∞·ªõc ƒë√£ th·ª±c hi·ªán:</h4>
                        ${result.steps.map((step, index) => `<div class="step-item"><span class="step-number">B∆∞·ªõc ${index + 1}:</span> ${step}</div>`).join('')}
                    </div>
                ` : ''}
                <div class="attack-example mt-2">
                    <strong>üí° L√Ω do:</strong> C√≥ th·ªÉ b·∫£n r√µ qu√° l·ªõn (m^e ‚â• n) ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.
                </div>
            `;
            showResult('attack-result', errorHTML, 'error');
        }
    } catch (error) {
        hideLoading('attack-loading');
        showResult('attack-result', `<h3>‚ùå L·ªói k·∫øt n·ªëi</h3><p>${error.message}</p>`, 'error');
    }
}

// Generate H√•stad Demo
async function generateHastadDemo() {
    const message = document.getElementById('hastad-message').value || 'Hello';
    const e = parseInt(document.getElementById('hastad-e').value) || 3;
    const bits = parseInt(document.getElementById('hastad-bits').value) || 1024;
    const count = parseInt(document.getElementById('hastad-count').value) || 3;
    const paddingType = document.getElementById('hastad-padding').value;
    const inputType = 'text'; // Ch·ªâ s·ª≠ d·ª•ng text

    showLoading('hastad-demo-loading');
    clearResult('hastad-demo-result');

    try {
        const response = await fetch('/api/generate_hastad_demo', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                message: message,
                e: e,
                bits: bits,
                count: count,
                input_type: inputType,
                padding_type: paddingType
            })
        });

        const result = await response.json();
        hideLoading('hastad-demo-loading');

        if (result.success) {
            // Hi·ªÉn th·ªã c√°c kh√≥a c√¥ng khai v·ªõi grid layout
            let keysHTML = `
                <div class="hastad-section">
                    <h4>üîë C√°c kh√≥a c√¥ng khai</h4>
                    <div class="hastad-keys-grid">
            `;
            result.keys.forEach((key, index) => {
                keysHTML += `
                    <div class="hastad-key-item">
                        <div class="key-title">Kh√≥a ${key.index}</div>
                        <div class="key-row">
                            <span class="key-label">n${key.index} =</span>
                            <textarea class="key-textarea" readonly>${formatNumber(key.n)}</textarea>
                        </div>
                        <div class="key-row">
                            <span class="key-label">e${key.index} =</span>
                            <span class="key-value">${key.e}</span>
                        </div>
                    </div>
                `;
            });
            keysHTML += `
                    </div>
                </div>
            `;

            // Hi·ªÉn th·ªã c√°c b·∫£n m√£ v·ªõi list layout
            let ciphersHTML = `
                <div class="hastad-section">
                    <h4>üîí C√°c b·∫£n m√£ t∆∞∆°ng ·ª©ng</h4>
                    <div class="hastad-ciphers-list">
            `;
            result.ciphertexts.forEach((cipher, index) => {
                ciphersHTML += `
                    <div class="hastad-cipher-item">
                        <div class="hastad-cipher-index">${index + 1}</div>
                        <div class="key-row" style="flex: 1;">
                            <span class="key-label">c${index + 1} =</span>
                            <textarea class="key-textarea" readonly>${formatNumber(cipher)}</textarea>
                        </div>
                    </div>
                `;
            });
            ciphersHTML += `
                    </div>
                </div>
            `;

            const inputTypeDisplay = result.input_type === 'integer' ? 'S·ªë nguy√™n' : 'VƒÉn b·∫£n';
            const messageDisplay = result.input_type === 'integer' ? result.message : `"${result.message}"`;

            const demoHTML = `
                <h3>üìã Demo T·∫•n c√¥ng H√•stad ƒë√£ s·∫µn s√†ng!</h3>
                <div class="key-display">
                    <div class="key-row">
                        <span class="key-label">B·∫£n r√µ g·ªëc:</span>
                        <span class="key-value">${messageDisplay}</span>
                    </div>
                    <div class="key-row">
                        <span class="key-label">Ki·ªÉu d·ªØ li·ªáu:</span>
                        <span class="key-value">${inputTypeDisplay}</span>
                    </div>
                    <div class="key-row">
                        <span class="key-label">S·ªë m≈© c√¥ng khai (e):</span>
                        <span class="key-value">${e}</span>
                    </div>
                    <div class="key-row">
                        <span class="key-label">S·ªë l∆∞·ª£ng kh√≥a:</span>
                        <span class="key-value">${count}</span>
                    </div>
                    <div class="key-row">
                        <span class="key-label">Lo·∫°i padding:</span>
                        <span class="key-value">${result.padding_type} ${result.padding_type === 'raw' ? '(C√≥ th·ªÉ t·∫•n c√¥ng)' : '(Ch·ªëng t·∫•n c√¥ng)'}</span>
                    </div>
                </div>
                ${keysHTML}
                ${ciphersHTML}
                <div class="attack-example mt-2">
                    <strong>üìù L∆∞u √Ω:</strong> C√πng m·ªôt b·∫£n r√µ ƒë∆∞·ª£c m√£ h√≥a v·ªõi ${count} kh√≥a kh√°c nhau c√≥ c√πng e=${e}. 
                    B√¢y gi·ªù h√£y th·ª±c hi·ªán t·∫•n c√¥ng H√•stad b√™n d∆∞·ªõi!
                </div>
            `;
            showResult('hastad-demo-result', demoHTML, 'success');

            // ƒêi·ªÅn d·ªØ li·ªáu v√†o form t·∫•n c√¥ng
            const ciphertextArea = document.getElementById('hastad-ciphertexts');
            const keysArea = document.getElementById('hastad-keys');

            ciphertextArea.value = result.ciphertexts.join('\n');

            let keysText = '';
            result.keys.forEach(key => {
                keysText += `${key.n},${key.e}\n`;
            });
            keysArea.value = keysText.trim();

        } else {
            // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p padding block
            if (result.padding_blocked) {
                const paddingBlockHTML = `
                    <h3>üõ°Ô∏è Padding ƒë√£ ch·∫∑n t·∫•n c√¥ng!</h3>
                    <div class="key-display">
                        <div class="key-row">
                            <span class="key-label">Lo·∫°i padding:</span>
                            <span class="key-value">${result.padding_type}</span>
                        </div>
                        <div class="key-row">
                            <span class="key-label">Tr·∫°ng th√°i:</span>
                            <span class="key-value" style="color: #00aa44; font-weight: bold;">‚úÖ CH·ªêNG ƒê∆Ø·ª¢C T·∫§N C√îNG</span>
                        </div>
                    </div>
                    <div class="warning-box">
                        <h4>üîí T·∫°i sao padding ch·ªëng ƒë∆∞·ª£c t·∫•n c√¥ng H√•stad?</h4>
                        <ul>
                            <li><strong>PKCS#1 v1.5:</strong> Th√™m random padding l√†m cho m·ªói l·∫ßn m√£ h√≥a c√πng message t·∫°o ra ciphertext kh√°c nhau</li>
                            <li><strong>OAEP:</strong> S·ª≠ d·ª•ng hash function v√† random padding, ƒë·∫£m b·∫£o m·ªói l·∫ßn m√£ h√≥a l√† duy nh·∫•t</li>
                            <li><strong>K·∫øt qu·∫£:</strong> Kh√¥ng c√≤n c√≥ c√πng message ƒë∆∞·ª£c m√£ h√≥a th√†nh c√πng pattern ‚Üí CRT kh√¥ng √°p d·ª•ng ƒë∆∞·ª£c</li>
                        </ul>
                    </div>
                    <div class="attack-example">
                        <strong>üí° B√†i h·ªçc:</strong> ƒê√¢y l√† l√Ω do t·∫°i sao KH√îNG BAO GI·ªú s·ª≠ d·ª•ng Raw RSA trong th·ª±c t·∫ø. 
                        Padding schemes nh∆∞ PKCS#1 v1.5 v√† OAEP ƒë√£ ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ch·ªëng l·∫°i c√°c cu·ªôc t·∫•n c√¥ng n√†y.
                    </div>
                    <div class="attack-example" style="border-left: 4px solid #00aa44;">
                        <strong>‚úÖ Th·ª≠ nghi·ªám:</strong> H√£y chuy·ªÉn v·ªÅ "Raw RSA" ƒë·ªÉ xem t·∫•n c√¥ng H√•stad ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o!
                    </div>
                `;
                showResult('hastad-demo-result', paddingBlockHTML, 'success');
            } else {
                showResult('hastad-demo-result', `<h3>‚ùå L·ªói t·∫°o demo</h3><p>${result.error}</p>`, 'error');
            }
        }
    } catch (error) {
        hideLoading('hastad-demo-loading');
        showResult('hastad-demo-result', `<h3>‚ùå L·ªói k·∫øt n·ªëi</h3><p>${error.message}</p>`, 'error');
    }
}

// H√•stad Attack
async function performHastadAttack() {
    const ciphertextsText = document.getElementById('hastad-ciphertexts').value;
    const keysText = document.getElementById('hastad-keys').value;

    if (!ciphertextsText || !keysText) {
        showResult('hastad-attack-result', '<h3>‚ö†Ô∏è Thi·∫øu th√¥ng tin</h3><p>Vui l√≤ng nh·∫≠p c√°c b·∫£n m√£ v√† kh√≥a c√¥ng khai!</p>', 'warning');
        return;
    }

    // Parse input
    const ciphertexts = ciphertextsText.split('\n').filter(line => line.trim());
    const keyLines = keysText.split('\n').filter(line => line.trim());

    if (ciphertexts.length !== keyLines.length) {
        showResult('hastad-attack-result', '<h3>‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng kh·ªõp</h3><p>S·ªë l∆∞·ª£ng b·∫£n m√£ v√† kh√≥a ph·∫£i b·∫±ng nhau!</p>', 'warning');
        return;
    }

    const publicKeys = keyLines.map(line => {
        const [n, e] = line.split(',');
        return { n: n.trim(), e: e.trim() };
    });

    showLoading('hastad-attack-loading');
    clearResult('hastad-attack-result');

    try {
        const response = await fetch('/api/attack_hastad', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ ciphertexts: ciphertexts, public_keys: publicKeys })
        });

        const result = await response.json();
        hideLoading('hastad-attack-loading');

        if (result.success) {
            const attackHTML = `
                <h3>üéØ T·∫•n c√¥ng H√•stad th√†nh c√¥ng!</h3>
                
                <div class="steps-container">
                    <h4>üîç C√°c b∆∞·ªõc t·∫•n c√¥ng H√•stad (Broadcast Attack):</h4>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 1:</span>
                        <span class="step-math">Thu th·∫≠p ${result.ciphertexts?.length || ciphertexts.length} b·∫£n m√£ c·ªßa c√πng b·∫£n r√µ m v·ªõi ${result.ciphertexts?.length || ciphertexts.length} kh√≥a RSA kh√°c nhau (c√πng e=${result.e || publicKeys[0]?.e})</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 2:</span>
                        <span class="step-math">Thi·∫øt l·∫≠p h·ªá ph∆∞∆°ng tr√¨nh ƒë·ªìng d∆∞:<br/>
                        m^${result.e || publicKeys[0]?.e} ‚â° ${formatNumber(ciphertexts[0])} (mod n‚ÇÅ)<br/>
                        m^${result.e || publicKeys[0]?.e} ‚â° ${formatNumber(ciphertexts[1] || 'c‚ÇÇ')} (mod n‚ÇÇ)<br/>
                        ${ciphertexts.length > 2 ? `m^${result.e || publicKeys[0]?.e} ‚â° ${formatNumber(ciphertexts[2])} (mod n‚ÇÉ)` : ''}
                        </span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 3:</span>
                        <span class="step-math">√Åp d·ª•ng ƒê·ªãnh l√Ω S·ªë d∆∞ Trung Hoa (CRT):<br/>
                        T√¨m x sao cho x ‚â° c·µ¢ (mod n·µ¢) v·ªõi i = 1,2,...,${ciphertexts.length}<br/>
                        K·∫øt qu·∫£: x = m^${result.e || publicKeys[0]?.e} mod (n‚ÇÅ√ón‚ÇÇ√ó...√ón${ciphertexts.length})</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 4:</span>
                        <span class="step-math">Ki·ªÉm tra ƒëi·ªÅu ki·ªán: m < min(n‚ÇÅ,n‚ÇÇ,...,n${ciphertexts.length})<br/>
                        Do ƒë√≥: m^${result.e || publicKeys[0]?.e} < n‚ÇÅ√ón‚ÇÇ√ó...√ón${ciphertexts.length}<br/>
                        V·∫≠y x = m^${result.e || publicKeys[0]?.e} (kh√¥ng c√≥ modulo th·ª±c s·ª±)</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 5:</span>
                        <span class="step-math">T√≠nh cƒÉn b·∫≠c ${result.e || publicKeys[0]?.e}:<br/>
                        m = ‚àõ(${formatNumber(result.crt_result || 'x')}) = ${formatNumber(result.recovered_m)}</span>
                    </div>
                    <div class="step-item">
                        <span class="step-number">B∆∞·ªõc 6:</span>
                        <span class="step-math">Chuy·ªÉn ƒë·ªïi v·ªÅ vƒÉn b·∫£n:<br/>
                        ${formatNumber(result.recovered_m)} ‚Üí "${result.message}"</span>
                    </div>
                    ${result.crt_result ? `
                    <div class="step-item">
                        <span class="step-number">üìä Chi ti·∫øt CRT:</span>
                        <span class="step-math">Gi√° tr·ªã trung gian m^${result.e || publicKeys[0]?.e} = ${formatNumber(result.crt_result)}<br/>
                        Modulus t·ªïng h·ª£p N = ${publicKeys.map((key, i) => `n${i + 1}`).join('√ó')}<br/>
                        ƒêi·ªÅu ki·ªán th·ªèa m√£n: m^${result.e || publicKeys[0]?.e} < N</span>
                    </div>
                    ` : ''}
                </div>

                <div class="key-display">
                    <h4>üìä K·∫øt qu·∫£ t·∫•n c√¥ng H√•stad:</h4>
                    <div class="key-row">
                        <span class="key-label">S·ªë l∆∞·ª£ng b·∫£n m√£:</span>
                        <span class="key-value short">${result.ciphertexts?.length || ciphertexts.length}</span>
                    </div>
                    <div class="key-row">
                        <span class="key-label">S·ªë m≈© c√¥ng khai (e):</span>
                        <span class="key-value short">${result.e || publicKeys[0]?.e}</span>
                    </div>
                    ${result.crt_result ? `
                    <div class="key-row">
                        <span class="key-label">Gi√° tr·ªã CRT (m^e):</span>
                        <textarea class="key-textarea" readonly>${formatNumber(result.crt_result)}</textarea>
                    </div>
                    ` : ''}
                    <div class="key-row">
                        <span class="key-label">B·∫£n r√µ kh√¥i ph·ª•c (m):</span>
                        <textarea class="key-textarea" readonly>${formatNumber(result.recovered_m)}</textarea>
                    </div>
                    <div class="key-row">
                        <span class="key-label">VƒÉn b·∫£n kh√¥i ph·ª•c:</span>
                        <span class="key-value">"${result.message}"</span>
                    </div>
                </div>
                
                <div class="warning-box mt-2">
                    <strong>üö® K·∫øt lu·∫≠n:</strong> T·∫•n c√¥ng H√•stad th√†nh c√¥ng! Kh√¥ng bao gi·ªù g·ª≠i c√πng m·ªôt b·∫£n r√µ t·ªõi nhi·ªÅu ng∆∞·ªùi v·ªõi c√πng s·ªë m≈© e nh·ªè!
                </div>
                
                <div class="attack-example mt-2">
                    <strong>üí° C√°ch ph√≤ng ch·ªëng:</strong> S·ª≠ d·ª•ng padding ng·∫´u nhi√™n, tr√°nh g·ª≠i c√πng b·∫£n r√µ v·ªõi c√πng e, ho·∫∑c s·ª≠ d·ª•ng e l·ªõn h∆°n.
                </div>
            `;
            showResult('hastad-attack-result', attackHTML, 'success');
        } else {
            const errorHTML = `
                <h3>‚ùå T·∫•n c√¥ng th·∫•t b·∫°i</h3>
                <p>${result.error}</p>
                ${result.steps ? `
                    <div class="steps-container">
                        <h4>C√°c b∆∞·ªõc ƒë√£ th·ª±c hi·ªán:</h4>
                        ${result.steps.map((step, index) => `<div class="step-item"><span class="step-number">B∆∞·ªõc ${index + 1}:</span> ${step}</div>`).join('')}
                    </div>
                ` : ''}
            `;
            showResult('hastad-attack-result', errorHTML, 'error');
        }
    } catch (error) {
        hideLoading('hastad-attack-loading');
        showResult('hastad-attack-result', `<h3>‚ùå L·ªói k·∫øt n·ªëi</h3><p>${error.message}</p>`, 'error');
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', function () {
    // Force fix display issues
    const style = document.createElement('style');
    style.textContent = `
        .key-value, .step-math {
            overflow: visible !important;
            max-height: none !important;
            height: auto !important;
            min-height: auto !important;
            word-wrap: break-word !important;
            white-space: pre-wrap !important;
        }
        .key-display, .result-section, .steps-container {
            overflow: visible !important;
            max-height: none !important;
            height: auto !important;
            width: 100% !important;
            max-width: 100% !important;
        }
    `;
    document.head.appendChild(style);

    initializeTabs();

    // Set default active tab
    const firstTab = document.querySelector('.tab-button');
    if (firstTab) {
        firstTab.click();
    }

    // Add event listeners for buttons
    const generateKeyBtn = document.getElementById('generate-key-btn');
    if (generateKeyBtn) {
        generateKeyBtn.addEventListener('click', generateRSAKey);
    }

    const encryptBtn = document.getElementById('encrypt-btn');
    if (encryptBtn) {
        encryptBtn.addEventListener('click', encryptMessage);
    }

    const decryptBtn = document.getElementById('decrypt-btn');
    if (decryptBtn) {
        decryptBtn.addEventListener('click', decryptMessage);
    }

    const attackBtn = document.getElementById('attack-btn');
    if (attackBtn) {
        attackBtn.addEventListener('click', performSingleAttack);
    }

    const hastadDemoBtn = document.getElementById('hastad-demo-btn');
    if (hastadDemoBtn) {
        hastadDemoBtn.addEventListener('click', generateHastadDemo);
    }

    const hastadAttackBtn = document.getElementById('hastad-attack-btn');
    if (hastadAttackBtn) {
        hastadAttackBtn.addEventListener('click', performHastadAttack);
    }

}); 