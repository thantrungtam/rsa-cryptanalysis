// H√†m utility
function showLoading(elementId) {
    const element = document.getElementById(elementId);
    if (element) {
        element.style.display = 'block';
    }
}

function hideLoading(elementId) {
    const element = document.getElementById(elementId);
    if (element) {
        element.style.display = 'none';
    }
}

function showResult(containerId, content, type = 'info') {
    const container = document.getElementById(containerId);
    if (!container) return;

    container.innerHTML = content;
    container.className = `result-section result-${type}`;
    container.style.display = 'block';
}

function clearResult(containerId) {
    const container = document.getElementById(containerId);
    if (container) {
        container.style.display = 'none';
        container.innerHTML = '';
    }
}

// Tab management
function initializeTabs() {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const targetTab = button.getAttribute('data-tab');

            // Remove active class from all buttons and contents
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));

            // Add active class to clicked button and corresponding content
            button.classList.add('active');
            document.getElementById(targetTab).classList.add('active');
        });
    });
}

// RSA Key Generation
async function generateRSAKey() {
    const e = parseInt(document.getElementById('exponent').value) || 3;
    const bits = parseInt(document.getElementById('key-bits').value) || 1024;

    showLoading('key-loading');
    clearResult('key-result');

    try {
        const response = await fetch('/api/generate_key', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ e: e, bits: bits })
        });

        const result = await response.json();
        hideLoading('key-loading');

        if (result.success) {
            const keyHTML = `
                <h3>üîë C·∫∑p kh√≥a RSA ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!</h3>
                <div class="key-display">
                    <strong>S·ªë m≈© c√¥ng khai (e):</strong> ${result.e}<br>
                    <strong>Modulus (n):</strong> ${result.n}<br>
                    <strong>S·ªë m≈© ri√™ng (d):</strong> ${result.d}<br>
                    <strong>S·ªë nguy√™n t·ªë p:</strong> ${result.p}<br>
                    <strong>S·ªë nguy√™n t·ªë q:</strong> ${result.q}<br>
                    <strong>ƒê·ªô d√†i kh√≥a:</strong> ${result.bits} bits
                </div>
                <div class="warning-box mt-2">
                    <strong>‚ö†Ô∏è C·∫£nh b√°o:</strong> V·ªõi e = ${result.e}, kh√≥a n√†y d·ªÖ b·ªã t·∫•n c√¥ng n·∫øu b·∫£n r√µ nh·ªè!
                </div>
            `;
            showResult('key-result', keyHTML, 'success');

            // L∆∞u kh√≥a v√†o form
            document.getElementById('encrypt-n').value = result.n;
            document.getElementById('encrypt-e').value = result.e;
            document.getElementById('decrypt-n').value = result.n;
            document.getElementById('decrypt-d').value = result.d;
            document.getElementById('attack-n').value = result.n;
            document.getElementById('attack-e').value = result.e;
        } else {
            showResult('key-result', `<h3>‚ùå L·ªói t·∫°o kh√≥a</h3><p>${result.error}</p>`, 'error');
        }
    } catch (error) {
        hideLoading('key-loading');
        showResult('key-result', `<h3>‚ùå L·ªói k·∫øt n·ªëi</h3><p>${error.message}</p>`, 'error');
    }
}

// RSA Encryption
async function encryptMessage() {
    const message = document.getElementById('encrypt-message').value;
    const n = document.getElementById('encrypt-n').value;
    const e = document.getElementById('encrypt-e').value;

    if (!message || !n || !e) {
        showResult('encrypt-result', '<h3>‚ö†Ô∏è Thi·∫øu th√¥ng tin</h3><p>Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!</p>', 'warning');
        return;
    }

    showLoading('encrypt-loading');
    clearResult('encrypt-result');

    try {
        const response = await fetch('/api/encrypt', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ message: message, n: n, e: e })
        });

        const result = await response.json();
        hideLoading('encrypt-loading');

        if (result.success) {
            const encryptHTML = `
                <h3>üîí M√£ h√≥a th√†nh c√¥ng!</h3>
                <div class="key-display">
                    <strong>B·∫£n r√µ:</strong> "${message}"<br>
                    <strong>B·∫£n r√µ (s·ªë nguy√™n):</strong> ${result.message_int}<br>
                    <strong>B·∫£n m√£:</strong> ${result.ciphertext}
                </div>
                <div class="step-item">
                    <strong>Ph√¢n t√≠ch:</strong> ${result.comparison}
                </div>
                ${parseInt(result.message_int) ** parseInt(e) < parseInt(n) ?
                    '<div class="warning-box mt-2"><strong>‚ö†Ô∏è Nguy hi·ªÉm:</strong> m^e < n, c√≥ th·ªÉ b·ªã t·∫•n c√¥ng khai cƒÉn!</div>' :
                    '<div class="attack-example mt-2"><strong>‚úÖ An to√†n:</strong> m^e ‚â• n, kh√¥ng th·ªÉ t·∫•n c√¥ng khai cƒÉn tr·ª±c ti·∫øp.</div>'
                }
            `;
            showResult('encrypt-result', encryptHTML, 'success');

            // L∆∞u b·∫£n m√£ ƒë·ªÉ gi·∫£i m√£ ho·∫∑c t·∫•n c√¥ng
            document.getElementById('decrypt-ciphertext').value = result.ciphertext;
            document.getElementById('attack-ciphertext').value = result.ciphertext;
        } else {
            showResult('encrypt-result', `<h3>‚ùå L·ªói m√£ h√≥a</h3><p>${result.error}</p>`, 'error');
        }
    } catch (error) {
        hideLoading('encrypt-loading');
        showResult('encrypt-result', `<h3>‚ùå L·ªói k·∫øt n·ªëi</h3><p>${error.message}</p>`, 'error');
    }
}

// RSA Decryption
async function decryptMessage() {
    const ciphertext = document.getElementById('decrypt-ciphertext').value;
    const n = document.getElementById('decrypt-n').value;
    const d = document.getElementById('decrypt-d').value;

    if (!ciphertext || !n || !d) {
        showResult('decrypt-result', '<h3>‚ö†Ô∏è Thi·∫øu th√¥ng tin</h3><p>Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!</p>', 'warning');
        return;
    }

    showLoading('decrypt-loading');
    clearResult('decrypt-result');

    try {
        const response = await fetch('/api/decrypt', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ ciphertext: ciphertext, n: n, d: d })
        });

        const result = await response.json();
        hideLoading('decrypt-loading');

        if (result.success) {
            const decryptHTML = `
                <h3>üîì Gi·∫£i m√£ th√†nh c√¥ng!</h3>
                <div class="key-display">
                    <strong>B·∫£n m√£:</strong> ${ciphertext}<br>
                    <strong>B·∫£n r√µ (s·ªë nguy√™n):</strong> ${result.message_int}<br>
                    <strong>B·∫£n r√µ:</strong> "${result.message}"
                </div>
            `;
            showResult('decrypt-result', decryptHTML, 'success');
        } else {
            showResult('decrypt-result', `<h3>‚ùå L·ªói gi·∫£i m√£</h3><p>${result.error}</p>`, 'error');
        }
    } catch (error) {
        hideLoading('decrypt-loading');
        showResult('decrypt-result', `<h3>‚ùå L·ªói k·∫øt n·ªëi</h3><p>${error.message}</p>`, 'error');
    }
}

// Single Attack (Cube Root Attack)
async function performSingleAttack() {
    const ciphertext = document.getElementById('attack-ciphertext').value;
    const n = document.getElementById('attack-n').value;
    const e = document.getElementById('attack-e').value;

    if (!ciphertext || !n || !e) {
        showResult('attack-result', '<h3>‚ö†Ô∏è Thi·∫øu th√¥ng tin</h3><p>Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!</p>', 'warning');
        return;
    }

    showLoading('attack-loading');
    clearResult('attack-result');

    try {
        const response = await fetch('/api/attack_single', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ ciphertext: ciphertext, n: n, e: e })
        });

        const result = await response.json();
        hideLoading('attack-loading');

        if (result.success) {
            let stepsHTML = '<div class="steps-container"><h4>üïµÔ∏è C√°c b∆∞·ªõc t·∫•n c√¥ng:</h4>';
            result.steps.forEach((step, index) => {
                stepsHTML += `<div class="step-item"><span class="step-number">B∆∞·ªõc ${index + 1}:</span> ${step}</div>`;
            });
            stepsHTML += '</div>';

            const attackHTML = `
                <h3>üéØ T·∫•n c√¥ng khai cƒÉn th√†nh c√¥ng!</h3>
                <div class="key-display">
                    <strong>B·∫£n r√µ ƒë√£ kh√¥i ph·ª•c:</strong> "${result.message}"<br>
                    <strong>Gi√° tr·ªã s·ªë nguy√™n:</strong> ${result.recovered_m}
                </div>
                ${stepsHTML}
                <div class="warning-box mt-2">
                    <strong>üîì K·∫øt lu·∫≠n:</strong> RSA v·ªõi e nh·ªè v√† b·∫£n r√µ nh·ªè c√≥ th·ªÉ b·ªã ph√° d·ªÖ d√†ng!
                </div>
            `;
            showResult('attack-result', attackHTML, 'success');
        } else {
            const errorHTML = `
                <h3>‚ùå T·∫•n c√¥ng th·∫•t b·∫°i</h3>
                <p>${result.error}</p>
                ${result.steps ? `
                    <div class="steps-container">
                        <h4>C√°c b∆∞·ªõc ƒë√£ th·ª±c hi·ªán:</h4>
                        ${result.steps.map((step, index) => `<div class="step-item"><span class="step-number">B∆∞·ªõc ${index + 1}:</span> ${step}</div>`).join('')}
                    </div>
                ` : ''}
                <div class="attack-example mt-2">
                    <strong>üí° L√Ω do:</strong> C√≥ th·ªÉ b·∫£n r√µ qu√° l·ªõn (m^e ‚â• n) ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.
                </div>
            `;
            showResult('attack-result', errorHTML, 'error');
        }
    } catch (error) {
        hideLoading('attack-loading');
        showResult('attack-result', `<h3>‚ùå L·ªói k·∫øt n·ªëi</h3><p>${error.message}</p>`, 'error');
    }
}

// Generate H√•stad Demo
async function generateHastadDemo() {
    const message = document.getElementById('hastad-message').value || 'Hello';
    const e = parseInt(document.getElementById('hastad-e').value) || 3;
    const bits = parseInt(document.getElementById('hastad-bits').value) || 1024;
    const count = parseInt(document.getElementById('hastad-count').value) || 3;

    showLoading('hastad-demo-loading');
    clearResult('hastad-demo-result');

    try {
        const response = await fetch('/api/generate_hastad_demo', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ message: message, e: e, bits: bits, count: count })
        });

        const result = await response.json();
        hideLoading('hastad-demo-loading');

        if (result.success) {
            let keysHTML = '<h4>üîë C√°c kh√≥a c√¥ng khai:</h4>';
            result.keys.forEach((key, index) => {
                keysHTML += `
                    <div class="key-display mb-2">
                        <strong>Kh√≥a ${key.index}:</strong><br>
                        n${key.index} = ${key.n}<br>
                        e${key.index} = ${key.e}
                    </div>
                `;
            });

            let ciphersHTML = '<h4>üîí C√°c b·∫£n m√£:</h4>';
            result.ciphertexts.forEach((cipher, index) => {
                ciphersHTML += `
                    <div class="key-display mb-1">
                        <strong>B·∫£n m√£ ${index + 1}:</strong> ${cipher}
                    </div>
                `;
            });

            const demoHTML = `
                <h3>üìã Demo T·∫•n c√¥ng H√•stad ƒë√£ s·∫µn s√†ng!</h3>
                <div class="key-display">
                    <strong>B·∫£n r√µ g·ªëc:</strong> "${result.message}"<br>
                    <strong>S·ªë m≈© c√¥ng khai:</strong> ${e}<br>
                    <strong>S·ªë l∆∞·ª£ng kh√≥a:</strong> ${count}
                </div>
                ${keysHTML}
                ${ciphersHTML}
                <div class="attack-example mt-2">
                    <strong>üìù L∆∞u √Ω:</strong> C√πng m·ªôt b·∫£n r√µ ƒë∆∞·ª£c m√£ h√≥a v·ªõi ${count} kh√≥a kh√°c nhau c√≥ c√πng e=${e}. 
                    B√¢y gi·ªù h√£y th·ª±c hi·ªán t·∫•n c√¥ng H√•stad b√™n d∆∞·ªõi!
                </div>
            `;
            showResult('hastad-demo-result', demoHTML, 'success');

            // ƒêi·ªÅn d·ªØ li·ªáu v√†o form t·∫•n c√¥ng
            const ciphertextArea = document.getElementById('hastad-ciphertexts');
            const keysArea = document.getElementById('hastad-keys');

            ciphertextArea.value = result.ciphertexts.join('\n');

            let keysText = '';
            result.keys.forEach(key => {
                keysText += `${key.n},${key.e}\n`;
            });
            keysArea.value = keysText.trim();

        } else {
            showResult('hastad-demo-result', `<h3>‚ùå L·ªói t·∫°o demo</h3><p>${result.error}</p>`, 'error');
        }
    } catch (error) {
        hideLoading('hastad-demo-loading');
        showResult('hastad-demo-result', `<h3>‚ùå L·ªói k·∫øt n·ªëi</h3><p>${error.message}</p>`, 'error');
    }
}

// H√•stad Attack
async function performHastadAttack() {
    const ciphertextsText = document.getElementById('hastad-ciphertexts').value;
    const keysText = document.getElementById('hastad-keys').value;

    if (!ciphertextsText || !keysText) {
        showResult('hastad-attack-result', '<h3>‚ö†Ô∏è Thi·∫øu th√¥ng tin</h3><p>Vui l√≤ng nh·∫≠p c√°c b·∫£n m√£ v√† kh√≥a c√¥ng khai!</p>', 'warning');
        return;
    }

    // Parse input
    const ciphertexts = ciphertextsText.split('\n').filter(line => line.trim());
    const keyLines = keysText.split('\n').filter(line => line.trim());

    if (ciphertexts.length !== keyLines.length) {
        showResult('hastad-attack-result', '<h3>‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng kh·ªõp</h3><p>S·ªë l∆∞·ª£ng b·∫£n m√£ v√† kh√≥a ph·∫£i b·∫±ng nhau!</p>', 'warning');
        return;
    }

    const publicKeys = keyLines.map(line => {
        const [n, e] = line.split(',');
        return { n: n.trim(), e: e.trim() };
    });

    showLoading('hastad-attack-loading');
    clearResult('hastad-attack-result');

    try {
        const response = await fetch('/api/attack_hastad', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ ciphertexts: ciphertexts, public_keys: publicKeys })
        });

        const result = await response.json();
        hideLoading('hastad-attack-loading');

        if (result.success) {
            let stepsHTML = '<div class="steps-container"><h4>üîç C√°c b∆∞·ªõc t·∫•n c√¥ng H√•stad:</h4>';
            result.steps.forEach((step, index) => {
                stepsHTML += `<div class="step-item"><span class="step-number">B∆∞·ªõc ${index + 1}:</span> ${step}</div>`;
            });
            stepsHTML += '</div>';

            const attackHTML = `
                <h3>üéØ T·∫•n c√¥ng H√•stad th√†nh c√¥ng!</h3>
                <div class="key-display">
                    <strong>B·∫£n r√µ ƒë√£ kh√¥i ph·ª•c:</strong> "${result.message}"<br>
                    <strong>Gi√° tr·ªã s·ªë nguy√™n:</strong> ${result.recovered_m}
                </div>
                ${stepsHTML}
                <div class="warning-box mt-2">
                    <strong>üö® K·∫øt lu·∫≠n:</strong> Kh√¥ng bao gi·ªù g·ª≠i c√πng m·ªôt b·∫£n r√µ t·ªõi nhi·ªÅu ng∆∞·ªùi v·ªõi c√πng s·ªë m≈© e nh·ªè!
                </div>
            `;
            showResult('hastad-attack-result', attackHTML, 'success');
        } else {
            const errorHTML = `
                <h3>‚ùå T·∫•n c√¥ng th·∫•t b·∫°i</h3>
                <p>${result.error}</p>
                ${result.steps ? `
                    <div class="steps-container">
                        <h4>C√°c b∆∞·ªõc ƒë√£ th·ª±c hi·ªán:</h4>
                        ${result.steps.map((step, index) => `<div class="step-item"><span class="step-number">B∆∞·ªõc ${index + 1}:</span> ${step}</div>`).join('')}
                    </div>
                ` : ''}
            `;
            showResult('hastad-attack-result', errorHTML, 'error');
        }
    } catch (error) {
        hideLoading('hastad-attack-loading');
        showResult('hastad-attack-result', `<h3>‚ùå L·ªói k·∫øt n·ªëi</h3><p>${error.message}</p>`, 'error');
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', function () {
    initializeTabs();

    // Set default active tab
    const firstTab = document.querySelector('.tab-button');
    if (firstTab) {
        firstTab.click();
    }

    // Add event listeners for buttons
    const generateKeyBtn = document.getElementById('generate-key-btn');
    if (generateKeyBtn) {
        generateKeyBtn.addEventListener('click', generateRSAKey);
    }

    const encryptBtn = document.getElementById('encrypt-btn');
    if (encryptBtn) {
        encryptBtn.addEventListener('click', encryptMessage);
    }

    const decryptBtn = document.getElementById('decrypt-btn');
    if (decryptBtn) {
        decryptBtn.addEventListener('click', decryptMessage);
    }

    const attackBtn = document.getElementById('attack-btn');
    if (attackBtn) {
        attackBtn.addEventListener('click', performSingleAttack);
    }

    const hastadDemoBtn = document.getElementById('hastad-demo-btn');
    if (hastadDemoBtn) {
        hastadDemoBtn.addEventListener('click', generateHastadDemo);
    }

    const hastadAttackBtn = document.getElementById('hastad-attack-btn');
    if (hastadAttackBtn) {
        hastadAttackBtn.addEventListener('click', performHastadAttack);
    }
}); 